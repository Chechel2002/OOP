class PerishableProduct extends Product {
    private String expirationDate;
    private static final int MAX_QUANTITY = 100;

    public PerishableProduct(String productId, String productName, int quantity, double price, String expirationDate) {
        super(productId, productName, quantity, price);
        this.expirationDate = expirationDate;
    }

    @Override
    public void updateStock(int amount) throws InvalidQuantityException {
        super.updateStock(amount);
        if (getQuantity() > MAX_QUANTITY) {
            throw new InvalidQuantityException("Cannot exceed maximum quantity of " + MAX_QUANTITY + " for perishable products.");
        }
    }
}

// NonPerishable Product subclass
class NonPerishableProduct extends Product {
    private int shelfLife;

    public NonPerishableProduct(String productId, String productName, int quantity, double price, int shelfLife) {
        super(productId, productName, quantity, price);
        this.shelfLife = shelfLife;
    }

    // No restrictions on updating stock
}

// Abstract Inventory Operation class
abstract class InventoryOperation {
    public abstract void addProduct(Product product);
    public abstract void removeProduct(String productId) throws InsufficientStockException;
}

// Inventory class implementation
class Inventory extends InventoryOperation {
    private List<Product> products;

    public Inventory() {
        products = new ArrayList<>();
    }

    @Override
    public void addProduct(Product product) {
        products.add(product);
        System.out.println("Product added: " + product.getProductName() + " with quantity " + product.getQuantity());
    }

    @Override
    public void removeProduct(String productId) throws InsufficientStockException {
        Product productToRemove = null;

        for (Product product : products) {
            if (product.getProductId().equals(productId)) {
                productToRemove = product;
                break;
            }
        }

        if (productToRemove != null) {
            if (productToRemove.getQuantity() <= 0) {
                throw new InsufficientStockException("Insufficient stock for product " + productToRemove.getProductName() + ".");
            }
            products.remove(productToRemove);
            System.out.println("Product " + productId + " removed successfully.");
        } else {
            System.out.println("Product not found.");
        }
    }
}
